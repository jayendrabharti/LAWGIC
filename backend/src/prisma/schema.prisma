generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  phone       String?   @unique
  name        String?
  avatar      String?
  dateOfBirth DateTime?
  isAdmin     Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  refreshTokens RefreshToken[]
  otp           otp?
  documents     Document[]
  highlights    Highlight[]
  threats       Threat[]

  @@map("users")
}

model RefreshToken {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  token      String   @unique
  expiresAt  DateTime
  clientInfo Json?
  isRevoked  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, token])
  @@map("refresh_tokens")
}

model otp {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("otps")
}

model Document {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  title       String
  filename    String
  fileUrl     String
  mimeType    String
  fileSize    Int
  pageCount   Int?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  highlights  Highlight[]
  threats     Threat[]

  @@map("documents")
}

model Highlight {
  id               String   @id @default(cuid())
  documentId       String
  document         Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  
  // Basic highlight data
  text             String   
  pageNumber       Int
  
  // Position data - stored as JSON for flexibility
  position         Json     // Contains: startOffset, endOffset, startXPath?, endXPath?, startPageOffset?, endPageOffset?
  
  // Visual appearance
  color            Json     // Contains: id, name, backgroundColor, borderColor?, textColor?
  
  // Metadata
  note             String?  
  tags             String[] 
  author           String?  @default("user")
  
  // State flags
  isActive         Boolean  @default(false)
  isTemporary      Boolean  @default(false)
  
  // Threat-specific fields (nullable for regular highlights)
  threatId         String?  @unique
  threat           Threat?  @relation(fields: [threatId], references: [id])
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([documentId, pageNumber])
  @@index([userId, documentId])
  @@map("highlights")
}

model Threat {
  id               String      @id @default(cuid())
  documentId       String
  document         Document    @relation(fields: [documentId], references: [id], onDelete: Cascade)
  userId           String
  user             User         @relation(fields: [userId], references: [id])
  
  // Core threat data
  text             String      // The threatening text content
  explanation      String      // Why this is considered a threat (reason)
  pageNumber       Int
  threatNumber     Int         // Sequential number within analysis
  
  // Classification
  severity         ThreatSeverity @default(HIGH)
  category         String?     // Type of threat (SQL injection, XSS, etc.)
  confidence       Float       @default(1.0) // Confidence level 0-1
  
  // Position and bounding data
  position         Json?       // Position information for precise highlighting
  boundingBox      Json?       // Bounding box data: {x, y, width, height}
  wordIndices      Int[]       // Array of word indices for precise positioning
  
  // Analysis metadata
  analysisVersion  String?     // Version of analysis engine used
  detectedAt       DateTime    @default(now())
  
  // Relationships
  highlight        Highlight?  // Optional linked highlight
  
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  @@index([documentId, pageNumber])
  @@index([userId, documentId])
  @@index([severity])
  @@map("threats")
}

enum ThreatSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
